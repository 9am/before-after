* {
    box-sizing: border-box;
    ::before,
    ::after {
        box-sizing: border-box;
    }
}

:host {
    --position: to right;
    --repeat: 1;
    --thumb-size: 1px;
    --thumb-color: white;
    --val: 0;
    --p: calc(var(--val) / var(--repeat) * 1%);
    display: grid;
    position: relative;
    overflow: visible;
    &::after {
        --thumb-size-hf: calc(var(--thumb-size) / 2);
        --thumb-gradient: var(--position),
            #0000 0 calc(var(--p) - var(--thumb-size-hf)),
            var(--thumb-color) calc(var(--p) - var(--thumb-size-hf)) calc(var(--p) + var(--thumb-size-hf)),
            #0000 0 calc(100% / var(--repeat));
        /* hide thumb if(0 || 100) */
        --thumb-opacity: calc(var(--val) * (100 - var(--val)));
        content: 'thumb';
        font-size: 0;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        filter: drop-shadow(0px 0px 1px black);
        background-image: linear-gradient(var(--thumb-gradient));
        pointer-events: none;
        opacity: var(--thumb-opacity);
    }
}
:host(:hover) {
    &::after {
        filter: drop-shadow(0px 0px 2px black);
    }
}

::slotted(*) {
    --before-mask: var(--position), #0000 0, var(--p), #000 0 calc(100% / var(--repeat));
    --after-mask: var(--position), #000 0, var(--p), #0000 0 calc(100% / var(--repeat));
}

#range,
::slotted([slot=before]),
::slotted([slot=after]) {
    grid-area: 1 / 1;
}

#range {
    z-index: 1;
    opacity: 0;
    appearance: none;
    -webkit-appearance: none;
    background: transparent;
    cursor: ew-resize;
    &:focus {
        outline: none;
    }
    &::-webkit-slider-thumb {
        appearance: none;
        -webkit-appearance: none;
        width: 0px;
        height: 0px;
    }
}

#check:invalid {
    color: red;
}

::slotted([slot=before]) {
    mask: linear-gradient(var(--before-mask));
}

::slotted([slot=after]) {
    mask: linear-gradient(var(--after-mask));
}

:host([orient=vertical]) {
    --position: to bottom;
    #range[orient=vertical] {
        appearance: slider-vertical;
        cursor: ns-resize;
        transform: rotate(0.5turn);
    }
}
:host(:not([varient*=repeating])) {
    --repeat: 1 !important;
}
:host([varient*=repeating]) {
    --repeat: 6;
}
:host([varient*=radial]) {
    --position: circle at center;
}
:host([varient*=conic]) {
    --position: at center;
    --thumb-size: .2deg;
    --p: calc(var(--val) / var(--repeat) * .01turn);
}

:host([varient=radial]) {
    &::after {
        background: radial-gradient(var(--thumb-gradient));
    }
    ::slotted([slot=before]) {
        mask: radial-gradient(var(--before-mask));
    }

    ::slotted([slot=after]) {
        mask: radial-gradient(var(--after-mask));
    }
}

:host([varient=conic]) {
    &::after {
        background: conic-gradient(var(--thumb-gradient));
    }
    ::slotted([slot=before]) {
        mask: conic-gradient(var(--before-mask));
    }

    ::slotted([slot=after]) {
        mask: conic-gradient(var(--after-mask));
    }
}

:host([varient=repeating-linear]) {
    &::after {
        background: repeating-linear-gradient(var(--thumb-gradient));
    }
    ::slotted([slot=before]) {
        mask: repeating-linear-gradient(var(--before-mask));
    }

    ::slotted([slot=after]) {
        mask: repeating-linear-gradient(var(--after-mask));
    }
}

:host([varient=repeating-radial]) {
    &::after {
        background: repeating-radial-gradient(var(--thumb-gradient));
    }
    ::slotted([slot=before]) {
        mask: repeating-radial-gradient(var(--before-mask));
    }

    ::slotted([slot=after]) {
        mask: repeating-radial-gradient(var(--after-mask));
    }
}

:host([varient=repeating-conic]) {
    &::after {
        background: repeating-conic-gradient(var(--thumb-gradient));
    }
    ::slotted([slot=before]) {
        mask: repeating-conic-gradient(var(--before-mask));
    }

    ::slotted([slot=after]) {
        mask: repeating-conic-gradient(var(--after-mask));
    }
}
